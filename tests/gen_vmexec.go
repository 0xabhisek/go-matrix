// Copyright 2018 The MATRIX Authors as well as Copyright 2014-2017 The go-ethereum Authors
// This file is consisted of the MATRIX library and part of the go-ethereum library.
//
// The MATRIX-ethereum library is free software: you can redistribute it and/or modify it under the terms of the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
//and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject tothe following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
//OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/matrix/go-matrix/common"
	"github.com/matrix/go-matrix/common/hexutil"
	"github.com/matrix/go-matrix/common/math"
)

var _ = (*vmExecMarshaling)(nil)

func (v vmExec) MarshalJSON() ([]byte, error) {
	type vmExec struct {
		Address  common.UnprefixedAddress `json:"address"  gencodec:"required"`
		Caller   common.UnprefixedAddress `json:"caller"   gencodec:"required"`
		Origin   common.UnprefixedAddress `json:"origin"   gencodec:"required"`
		Code     hexutil.Bytes            `json:"code"     gencodec:"required"`
		Data     hexutil.Bytes            `json:"data"     gencodec:"required"`
		Value    *math.HexOrDecimal256    `json:"value"    gencodec:"required"`
		GasLimit math.HexOrDecimal64      `json:"gas"      gencodec:"required"`
		GasPrice *math.HexOrDecimal256    `json:"gasPrice" gencodec:"required"`
	}
	var enc vmExec
	enc.Address = common.UnprefixedAddress(v.Address)
	enc.Caller = common.UnprefixedAddress(v.Caller)
	enc.Origin = common.UnprefixedAddress(v.Origin)
	enc.Code = v.Code
	enc.Data = v.Data
	enc.Value = (*math.HexOrDecimal256)(v.Value)
	enc.GasLimit = math.HexOrDecimal64(v.GasLimit)
	enc.GasPrice = (*math.HexOrDecimal256)(v.GasPrice)
	return json.Marshal(&enc)
}

func (v *vmExec) UnmarshalJSON(input []byte) error {
	type vmExec struct {
		Address  *common.UnprefixedAddress `json:"address"  gencodec:"required"`
		Caller   *common.UnprefixedAddress `json:"caller"   gencodec:"required"`
		Origin   *common.UnprefixedAddress `json:"origin"   gencodec:"required"`
		Code     *hexutil.Bytes            `json:"code"     gencodec:"required"`
		Data     *hexutil.Bytes            `json:"data"     gencodec:"required"`
		Value    *math.HexOrDecimal256     `json:"value"    gencodec:"required"`
		GasLimit *math.HexOrDecimal64      `json:"gas"      gencodec:"required"`
		GasPrice *math.HexOrDecimal256     `json:"gasPrice" gencodec:"required"`
	}
	var dec vmExec
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Address == nil {
		return errors.New("missing required field 'address' for vmExec")
	}
	v.Address = common.Address(*dec.Address)
	if dec.Caller == nil {
		return errors.New("missing required field 'caller' for vmExec")
	}
	v.Caller = common.Address(*dec.Caller)
	if dec.Origin == nil {
		return errors.New("missing required field 'origin' for vmExec")
	}
	v.Origin = common.Address(*dec.Origin)
	if dec.Code == nil {
		return errors.New("missing required field 'code' for vmExec")
	}
	v.Code = *dec.Code
	if dec.Data == nil {
		return errors.New("missing required field 'data' for vmExec")
	}
	v.Data = *dec.Data
	if dec.Value == nil {
		return errors.New("missing required field 'value' for vmExec")
	}
	v.Value = (*big.Int)(dec.Value)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas' for vmExec")
	}
	v.GasLimit = uint64(*dec.GasLimit)
	if dec.GasPrice == nil {
		return errors.New("missing required field 'gasPrice' for vmExec")
	}
	v.GasPrice = (*big.Int)(dec.GasPrice)
	return nil
}
